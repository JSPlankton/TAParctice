#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
RWTexture2D<half4>  rflectRT;           //反射后的颜色
RWTexture2D<half>   rflectDepthRT;      //只使用R通道
Texture2D<float4>   _ScreenColorTex;    //屏幕颜色
Texture2D<float4>   _ScreenDepthTex;    //屏幕深度
float2 rtSize;
float reflectPlaneH;
float fadeOut2Edge;
SamplerState pointClampSampler;         //像素采样 Clamp类型
SamplerState linearClampSampler;        //模糊采样 Clamp类型

half SDFCube(half2 pos)
{
    half2 dis = abs(pos) - half2(1, 1);
    return length(max(dis, 0.0)) - min(max(dis.x, dis.y), 0.0);    
}

#pragma kernel CSMain

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //缓冲区初始化
    rflectRT[id.xy] = half4(0, 0, 0, 0);
    rflectDepthRT[id.xy] = 0;

    //重建世界坐标系
    //线程ID换算到屏幕UV
    float2 ssuv = id.xy / rtSize;
    //得到深度根据uv采样对应id，使用point模式 + clamp
    float NDCposZ = _ScreenDepthTex.SampleLevel( pointClampSampler, ssuv, 0).x;
    float4 NDCpos = float4( ssuv * 2.0 - 1.0, NDCposZ, 1 );
    //得到经过透视剔除的世界坐标,w分量是用于透视剔除的w(near, far)的倒数
    float4 HWSpos = mul(UNITY_MATRIX_I_VP, NDCpos);
    //得到正常的世界坐标
    float3 WSpos = HWSpos.xyz / HWSpos.w;
    //高度测试，低于反射平面的高度不写入颜色和深度
    if (WSpos.y < reflectPlaneH) return;

    float3 reWSpos = WSpos;
    reWSpos.y = -(reWSpos.y - reflectPlaneH) + reflectPlaneH;
    float4 reCSpos = mul(UNITY_MATRIX_VP, float4(reWSpos, 1));
    float2 reNDC = reCSpos.xy / reCSpos.w;

    //NDC测试，超出NDC部分不写入颜色和深度
    if (abs(reNDC.x) > 1|| abs(reNDC.y) > 1) return;

    //DX平台的Y翻转
    float2 reSSUV = reNDC * 0.5 + 0.5;
    #ifdef UNITY_UV_STARTS_AT_TOP
        reSSUV.y = 1 - reSSUV.y;
    #endif
    
    uint2 reSSUVid = reSSUV * rtSize;
    #ifdef UNITY_REVERSED_Z
    //DX平台深度测试 Z反转 深度小于像素 测试失败 不写入颜色和深度
    if (reCSpos.z < rflectDepthRT[reSSUVid]) return;
    #else
    //OpenGL平台深度测试 没有Z反转 深度小于像素 测试失败 不写入颜色和深度
    (reCSpos.z >= rflectDepthRT[reSSUVid]) return;
    #endif

    half mask = SDFCube(ssuv * 2 - 1);
    mask = smoothstep(0, fadeOut2Edge, abs(mask));
    //写入颜色到颜色缓冲区
    rflectRT[reSSUVid] = half4(_ScreenColorTex.SampleLevel(linearClampSampler, ssuv, 0).xyz, mask);
    //写入深度到深度缓冲区
    rflectDepthRT[reSSUVid] = reCSpos.z;
}
